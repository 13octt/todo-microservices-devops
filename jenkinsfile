pipeline {
    agent any

    environment {
        DOCKER_CREDENTIALS_ID = 'dockerhub-credentials'
        KUBECONFIG_CREDENTIALS_ID = 'kubeconfig-credentials'
        SONARQUBE_ENV = "MySonarQube"
        TRIVY_TOKEN = credentials('trivy-token') // nếu có
    }

    stages {
        stage('Clone Repository') {
            steps {
                git branch: 'main', url: 'https://github.com/your-repo/todo-app.git'
            }
        }

        stage('Build and Start Services') {
            steps {
                script {
                    // Xây dựng và khởi động tất cả các dịch vụ bằng Docker Compose
                    sh 'docker-compose up --build -d'
                }
            }
        }

        stage('SonarQube Analysis') {
            steps {
                withSonarQubeEnv(SONARQUBE_ENV) {
                    script {
                        // Chạy phân tích SonarQube
                        sh 'mvn sonar:sonar -Dsonar.projectKey=todo_app_key'
                    }
                }
            }
        }

        stage('Security Check with Trivy') {
            steps {
                script {
                    // Quét bảo mật cho tất cả các image được xây dựng
                    def services = ['auth-service', 'gateway', 'profile-service', 'task-service', 'todo-fe']
                    services.each { service ->
                        sh "trivy image --exit-code 1 --severity HIGH yourdockerhubusername/${service}:latest"
                    }
                }
            }
        }

        stage('Deploy to Kubernetes') {
            steps {
                script {
                    withCredentials([file(credentialsId: KUBECONFIG_CREDENTIALS_ID, variable: 'KUBECONFIG')]) {
                        // Áp dụng tất cả các tệp YAML trong thư mục k8s
                        sh "kubectl apply -f ./k8s/ --kubeconfig=$KUBECONFIG"
                    }
                }
            }
        }
    }

    post {
        always {
            script {
                // Dọn dẹp container và mạng nếu đang chạy
                sh 'docker-compose down'
            }
        }

        success {
            script {
                timeout(time: 5, unit: 'MINUTES') {
                    waitForQualityGate abortPipeline: true
                }
            }
        }
    }
}
